//ron oshri ovadia 203391107//
// introduction to c++//
// Exercise 5.2//
//The program has 3 functions one bastard 2 lists one turns a list into a group and one turns a list into the other side//
#include <iostream>
#include "List.h"
using namespace std;


List merge(List& lst1, List& lst2)
{
	List merge;
	while (!lst1.isEmpty() && !lst2.isEmpty())
	{
		if (lst1.firstElement() < lst2.firstElement())
		{
			merge.insert(lst1.firstElement());
			lst1.removefirst();
		}
		else
		{
			merge.insert(lst2.firstElement());
			lst2.removefirst();
		}
	}

	while (!lst1.isEmpty())
	{
		merge.insert(lst1.firstElement());
		lst1.removefirst();
	}

	while (!lst2.isEmpty())
	{
		merge.insert(lst2.firstElement());
		lst2.removefirst();
	}
	return merge;
}


void makeSet(List& lst1)
{
	List list;
	int listA;
	while (!lst1.isEmpty())//as long as there are still ekements in the list
	{
		listA = lst1.firstElement();
		list.insert(lst1.firstElement());//put the first ekement in st1 in temp
		lst1.removefirst();//remove the first element
		if (list.search(listA))//if temp is is still at lst1
		{
			lst1.remove(listA);//remove temp from lst1
		}

	}
	lst1.clear();
	lst1 = list;

}


void reverse(List& lst1)
{
	List list;
	while (!lst1.isEmpty())
	{
		list.addfirst(lst1.firstElement());//add to the first place at temp
		lst1.removefirst();
	}
	lst1.clear();
	lst1 = list;

}
int main()
{
	List lst1, lst2, mergedList;

	cout << "enter sorted values for the first list:" << endl;
	cin >> lst1;
	cout << "enter sorted values for the second list:" << endl;
	cin >> lst2;

	mergedList = merge(lst1, lst2);
	cout << "the new merged list: " << mergedList << endl;

	makeSet(mergedList);
	cout << "the new merged set: " << mergedList << endl;
	reverse(mergedList);
	cout << "the new merged reverse: " << mergedList << endl;


	return 0;

}